// Code generated by protoc-gen-go. DO NOT EDIT.
// source: payment.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Payment_Vendor int32

const (
	Payment_BLIBLI    Payment_Vendor = 0
	Payment_BUKALAPAK Payment_Vendor = 1
	Payment_MURAHID   Payment_Vendor = 2
)

var Payment_Vendor_name = map[int32]string{
	0: "BLIBLI",
	1: "BUKALAPAK",
	2: "MURAHID",
}

var Payment_Vendor_value = map[string]int32{
	"BLIBLI":    0,
	"BUKALAPAK": 1,
	"MURAHID":   2,
}

func (x Payment_Vendor) String() string {
	return proto.EnumName(Payment_Vendor_name, int32(x))
}

func (Payment_Vendor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{1, 0}
}

type PaymentId struct {
	PaymentId            string   `protobuf:"bytes,1,opt,name=paymentId,proto3" json:"paymentId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentId) Reset()         { *m = PaymentId{} }
func (m *PaymentId) String() string { return proto.CompactTextString(m) }
func (*PaymentId) ProtoMessage()    {}
func (*PaymentId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{0}
}

func (m *PaymentId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentId.Unmarshal(m, b)
}
func (m *PaymentId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentId.Marshal(b, m, deterministic)
}
func (m *PaymentId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentId.Merge(m, src)
}
func (m *PaymentId) XXX_Size() int {
	return xxx_messageInfo_PaymentId.Size(m)
}
func (m *PaymentId) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentId.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentId proto.InternalMessageInfo

func (m *PaymentId) GetPaymentId() string {
	if m != nil {
		return m.PaymentId
	}
	return ""
}

type Payment struct {
	Vendor               Payment_Vendor `protobuf:"varint,1,opt,name=vendor,proto3,enum=v1.Payment_Vendor" json:"vendor,omitempty"`
	OrderId              string         `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ExpiredIn            int64          `protobuf:"varint,3,opt,name=expiredIn,proto3" json:"expiredIn,omitempty"`
	Paid                 bool           `protobuf:"varint,4,opt,name=paid,proto3" json:"paid,omitempty"`
	Value                int32          `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{1}
}

func (m *Payment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payment.Unmarshal(m, b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return xxx_messageInfo_Payment.Size(m)
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetVendor() Payment_Vendor {
	if m != nil {
		return m.Vendor
	}
	return Payment_BLIBLI
}

func (m *Payment) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *Payment) GetExpiredIn() int64 {
	if m != nil {
		return m.ExpiredIn
	}
	return 0
}

func (m *Payment) GetPaid() bool {
	if m != nil {
		return m.Paid
	}
	return false
}

func (m *Payment) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Payments struct {
	Payments             []*Payment `protobuf:"bytes,1,rep,name=payments,proto3" json:"payments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Payments) Reset()         { *m = Payments{} }
func (m *Payments) String() string { return proto.CompactTextString(m) }
func (*Payments) ProtoMessage()    {}
func (*Payments) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{2}
}

func (m *Payments) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payments.Unmarshal(m, b)
}
func (m *Payments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payments.Marshal(b, m, deterministic)
}
func (m *Payments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payments.Merge(m, src)
}
func (m *Payments) XXX_Size() int {
	return xxx_messageInfo_Payments.Size(m)
}
func (m *Payments) XXX_DiscardUnknown() {
	xxx_messageInfo_Payments.DiscardUnknown(m)
}

var xxx_messageInfo_Payments proto.InternalMessageInfo

func (m *Payments) GetPayments() []*Payment {
	if m != nil {
		return m.Payments
	}
	return nil
}

func init() {
	proto.RegisterEnum("v1.Payment_Vendor", Payment_Vendor_name, Payment_Vendor_value)
	proto.RegisterType((*PaymentId)(nil), "v1.PaymentId")
	proto.RegisterType((*Payment)(nil), "v1.Payment")
	proto.RegisterType((*Payments)(nil), "v1.Payments")
}

func init() { proto.RegisterFile("payment.proto", fileDescriptor_6362648dfa63d410) }

var fileDescriptor_6362648dfa63d410 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xdd, 0x8a, 0x9b, 0x40,
	0x14, 0x76, 0xf2, 0x63, 0xe2, 0x31, 0x86, 0x70, 0xe8, 0x85, 0x48, 0x2f, 0xc4, 0x9b, 0xda, 0x96,
	0x4a, 0x93, 0x3c, 0x81, 0x69, 0xa0, 0x95, 0xa4, 0x34, 0x4c, 0xb0, 0xf7, 0xd3, 0xcc, 0xa1, 0x04,
	0xb2, 0x2a, 0x3a, 0x91, 0xdd, 0x17, 0x5c, 0xd8, 0xb7, 0x5a, 0x32, 0xea, 0xc6, 0xbb, 0xbd, 0xf3,
	0xfb, 0x39, 0xe7, 0x3b, 0x9f, 0x03, 0x4e, 0x21, 0x9e, 0x1e, 0x28, 0x53, 0x51, 0x51, 0xe6, 0x2a,
	0xc7, 0x41, 0xbd, 0xf4, 0x9c, 0x93, 0x50, 0xe2, 0x92, 0xff, 0x6f, 0x28, 0xcf, 0xce, 0x4b, 0x49,
	0x65, 0x03, 0x82, 0xcf, 0x60, 0x1d, 0x9a, 0x81, 0x44, 0xe2, 0x47, 0xb0, 0x8a, 0x0e, 0xb8, 0xcc,
	0x67, 0xa1, 0xc5, 0xef, 0x44, 0xf0, 0xc2, 0x60, 0xd2, 0x7a, 0xf1, 0x0b, 0x98, 0x35, 0x65, 0x32,
	0x2f, 0xb5, 0x6d, 0xbe, 0xc2, 0xa8, 0x5e, 0x46, 0xad, 0x18, 0xfd, 0xd5, 0x0a, 0x6f, 0x1d, 0xe8,
	0xc2, 0x44, 0x27, 0x26, 0xd2, 0x1d, 0xe8, 0x9d, 0x1d, 0xbc, 0xe5, 0xd1, 0x63, 0x71, 0x2e, 0x49,
	0x26, 0x99, 0x3b, 0xf4, 0x59, 0x38, 0xe4, 0x77, 0x02, 0x11, 0x46, 0x85, 0x38, 0x4b, 0x77, 0xe4,
	0xb3, 0x70, 0xca, 0xf5, 0x37, 0x7e, 0x80, 0x71, 0x2d, 0x2e, 0x57, 0x72, 0xc7, 0x3e, 0x0b, 0xc7,
	0xbc, 0x01, 0xc1, 0x77, 0x30, 0x9b, 0x4c, 0x04, 0x30, 0x37, 0xfb, 0x64, 0xb3, 0x4f, 0x16, 0x06,
	0x3a, 0x60, 0x6d, 0xd2, 0x5d, 0xbc, 0x8f, 0x0f, 0xf1, 0x6e, 0xc1, 0xd0, 0x86, 0xc9, 0xef, 0x94,
	0xc7, 0xbf, 0x92, 0xed, 0x62, 0x10, 0xac, 0x61, 0xda, 0x5e, 0x5b, 0xe1, 0x27, 0x98, 0xb6, 0x25,
	0x2b, 0x97, 0xf9, 0xc3, 0xd0, 0x5e, 0xd9, 0xbd, 0x36, 0xfc, 0x4d, 0x5c, 0x3d, 0x33, 0x98, 0xb7,
	0xec, 0x91, 0xca, 0xfa, 0x7c, 0x22, 0xfc, 0x0a, 0xce, 0x8f, 0x92, 0x84, 0xa2, 0xee, 0xc7, 0xe8,
	0xd1, 0x3f, 0x4d, 0x3f, 0xaf, 0xbf, 0x27, 0x30, 0xf0, 0x1b, 0xcc, 0xd2, 0x42, 0x0a, 0x45, 0x47,
	0x25, 0xd4, 0xb5, 0x42, 0xa7, 0x27, 0x27, 0xd2, 0x9b, 0xdd, 0x20, 0xa7, 0xaa, 0xc8, 0xb3, 0x8a,
	0x02, 0x03, 0x23, 0x70, 0xb6, 0x74, 0xa1, 0xfb, 0xee, 0x77, 0xfc, 0x21, 0xc0, 0x4f, 0x52, 0x9d,
	0x19, 0x6e, 0x6a, 0x5a, 0xe9, 0x3b, 0x66, 0xbd, 0xc1, 0x2a, 0x30, 0xfe, 0x99, 0xfa, 0xed, 0xd7,
	0xaf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x25, 0x0a, 0x4f, 0x2c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentServiceClient interface {
	CreatePayment(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*Payment, error)
	UpdateStatus(ctx context.Context, in *PaymentId, opts ...grpc.CallOption) (*Response, error)
	DeletePayment(ctx context.Context, in *PaymentId, opts ...grpc.CallOption) (*Response, error)
	GetPayment(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Payments, error)
}

type paymentServiceClient struct {
	cc *grpc.ClientConn
}

func NewPaymentServiceClient(cc *grpc.ClientConn) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) CreatePayment(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := c.cc.Invoke(ctx, "/v1.PaymentService/CreatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdateStatus(ctx context.Context, in *PaymentId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/v1.PaymentService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DeletePayment(ctx context.Context, in *PaymentId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/v1.PaymentService/DeletePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPayment(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Payments, error) {
	out := new(Payments)
	err := c.cc.Invoke(ctx, "/v1.PaymentService/GetPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
type PaymentServiceServer interface {
	CreatePayment(context.Context, *OrderId) (*Payment, error)
	UpdateStatus(context.Context, *PaymentId) (*Response, error)
	DeletePayment(context.Context, *PaymentId) (*Response, error)
	GetPayment(context.Context, *UserId) (*Payments, error)
}

func RegisterPaymentServiceServer(s *grpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PaymentService/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePayment(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PaymentService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdateStatus(ctx, req.(*PaymentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DeletePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DeletePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PaymentService/DeletePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DeletePayment(ctx, req.(*PaymentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PaymentService/GetPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPayment(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentService_CreatePayment_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _PaymentService_UpdateStatus_Handler,
		},
		{
			MethodName: "DeletePayment",
			Handler:    _PaymentService_DeletePayment_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _PaymentService_GetPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
